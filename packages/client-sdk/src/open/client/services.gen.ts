// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class GlobalService {
    /**
     * Get Tianji system global config
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static globalConfig(): CancelablePromise<$OpenApiTs['/global/config']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/global/config'
        });
    }
    
}

export class UserService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static userLogin(data: $OpenApiTs['/login']['post']['req']): CancelablePromise<$OpenApiTs['/login']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/login',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static userLoginWithToken(data: $OpenApiTs['/loginWithToken']['post']['req']): CancelablePromise<$OpenApiTs['/loginWithToken']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/loginWithToken',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static userRegister(data: $OpenApiTs['/register']['post']['req']): CancelablePromise<$OpenApiTs['/register']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/register',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class WorkspaceService {
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static workspaceGetServiceCount(data: $OpenApiTs['/workspace/{workspaceId}/getServiceCount']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/getServiceCount']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/getServiceCount',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
}

export class WebsiteService {
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static websiteOnlineCount(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/onlineCount']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/onlineCount']['get']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/onlineCount']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/onlineCount',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteAll(data: $OpenApiTs['/workspace/{workspaceId}/website/all']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/all']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/all',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteInfo(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/info']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/info']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/info',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @param data.startAt
     * @param data.endAt
     * @param data.unit
     * @param data.url
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.timezone
     * @param data.referrer
     * @param data.title
     * @param data.os
     * @param data.browser
     * @param data.device
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteStats(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/stats']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/stats']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/stats',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            },
            query: {
                startAt: data.startAt,
                endAt: data.endAt,
                unit: data.unit,
                url: data.url,
                country: data.country,
                region: data.region,
                city: data.city,
                timezone: data.timezone,
                referrer: data.referrer,
                title: data.title,
                os: data.os,
                browser: data.browser,
                device: data.device
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @param data.startAt
     * @param data.endAt
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteGeoStats(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/geoStats']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/geoStats']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/geoStats',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            },
            query: {
                startAt: data.startAt,
                endAt: data.endAt
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @param data.startAt
     * @param data.endAt
     * @param data.unit
     * @param data.url
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.timezone
     * @param data.referrer
     * @param data.title
     * @param data.os
     * @param data.browser
     * @param data.device
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websitePageviews(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/pageviews']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/pageviews']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/pageviews',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            },
            query: {
                startAt: data.startAt,
                endAt: data.endAt,
                unit: data.unit,
                url: data.url,
                country: data.country,
                region: data.region,
                city: data.city,
                timezone: data.timezone,
                referrer: data.referrer,
                title: data.title,
                os: data.os,
                browser: data.browser,
                device: data.device
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @param data.type
     * @param data.startAt
     * @param data.endAt
     * @param data.url
     * @param data.referrer
     * @param data.title
     * @param data.os
     * @param data.browser
     * @param data.device
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.language
     * @param data.event
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteMetrics(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/metrics']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/metrics']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/website/{websiteId}/metrics',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            },
            query: {
                type: data.type,
                startAt: data.startAt,
                endAt: data.endAt,
                url: data.url,
                referrer: data.referrer,
                title: data.title,
                os: data.os,
                browser: data.browser,
                device: data.device,
                country: data.country,
                region: data.region,
                city: data.city,
                language: data.language,
                event: data.event
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteAdd(data: $OpenApiTs['/workspace/{workspaceId}/website/add']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/add']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/website/add',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.websiteId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static websiteUpdateInfo(data: $OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/update']['put']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/website/{websiteId}/update']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/workspace/{workspaceId}/website/{websiteId}/update',
            path: {
                workspaceId: data.workspaceId,
                websiteId: data.websiteId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MonitorService {
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorAll(data: $OpenApiTs['/workspace/{workspaceId}/monitor/all']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/all']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/all',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorGet(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/{monitorId}',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorDelete(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}']['delete']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspace/{workspaceId}/monitor/{monitorId}',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorGetPublicInfo(data: $OpenApiTs['/monitor/getPublicInfo']['post']['req']): CancelablePromise<$OpenApiTs['/monitor/getPublicInfo']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/monitor/getPublicInfo',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorUpsert(data: $OpenApiTs['/workspace/{workspaceId}/monitor/upsert']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/upsert']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/monitor/upsert',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @param data.startAt
     * @param data.endAt
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorData(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/data']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/data']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/{monitorId}/data',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            },
            query: {
                startAt: data.startAt,
                endAt: data.endAt
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorChangeActive(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/changeActive']['patch']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/changeActive']['patch']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/workspace/{workspaceId}/monitor/{monitorId}/changeActive',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @param data.take
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorRecentData(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/recentData']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/recentData']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/{monitorId}/recentData',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            },
            query: {
                take: data.take
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorDataMetrics(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/dataMetrics']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/dataMetrics']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/{monitorId}/dataMetrics',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @param data.limit
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorEvents(data: $OpenApiTs['/workspace/{workspaceId}/monitor/events']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/events']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/events',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                monitorId: data.monitorId,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static monitorClearEvents(data: $OpenApiTs['/workspace/{workspaceId}/monitor/clearEvents']['delete']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/clearEvents']['delete']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/monitor/clearEvents']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspace/{workspaceId}/monitor/clearEvents',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                monitorId: data.monitorId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static monitorClearData(data: $OpenApiTs['/workspace/{workspaceId}/monitor/clearData']['delete']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/clearData']['delete']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/monitor/clearData']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspace/{workspaceId}/monitor/clearData',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                monitorId: data.monitorId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.monitorId
     * @param data.statusName
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorGetStatus(data: $OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/status']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/{monitorId}/status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/{monitorId}/status',
            path: {
                workspaceId: data.workspaceId,
                monitorId: data.monitorId
            },
            query: {
                statusName: data.statusName
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorGetAllPages(data: $OpenApiTs['/workspace/{workspaceId}/monitor/getAllPages']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/getAllPages']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/monitor/getAllPages',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.slug
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorGetPageInfo(data: $OpenApiTs['/monitor/getPageInfo']['get']['req']): CancelablePromise<$OpenApiTs['/monitor/getPageInfo']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/monitor/getPageInfo',
            query: {
                slug: data.slug
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorCreatePage(data: $OpenApiTs['/workspace/{workspaceId}/monitor/createStatusPage']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/createStatusPage']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/monitor/createStatusPage',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorEditPage(data: $OpenApiTs['/workspace/{workspaceId}/monitor/updateStatusPage']['patch']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/updateStatusPage']['patch']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/workspace/{workspaceId}/monitor/updateStatusPage',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.id
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static monitorDeletePage(data: $OpenApiTs['/workspace/{workspaceId}/monitor/deleteStatusPage']['delete']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/monitor/deleteStatusPage']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspace/{workspaceId}/monitor/deleteStatusPage',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                id: data.id
            }
        });
    }
    
}

export class TelemetryService {
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryAll(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/all']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/all']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/all',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.telemetryId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryInfo(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/info']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/info']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/info',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                telemetryId: data.telemetryId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static telemetryAllEventCount(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/allEventCount']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/allEventCount']['get']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/telemetry/allEventCount']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/allEventCount',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.telemetryId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static telemetryEventCount(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/eventCount']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/eventCount']['get']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/telemetry/eventCount']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/eventCount',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                telemetryId: data.telemetryId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryUpsert(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/upsert']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/upsert']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/telemetry/upsert',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryDelete(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/delete']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/delete']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/telemetry/delete',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.telemetryId
     * @param data.startAt
     * @param data.endAt
     * @param data.unit
     * @param data.url
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.timezone
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryPageviews(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/pageviews']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/pageviews']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/pageviews',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                telemetryId: data.telemetryId,
                startAt: data.startAt,
                endAt: data.endAt,
                unit: data.unit,
                url: data.url,
                country: data.country,
                region: data.region,
                city: data.city,
                timezone: data.timezone
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.telemetryId
     * @param data.type
     * @param data.startAt
     * @param data.endAt
     * @param data.url
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.timezone
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryMetrics(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/metrics']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/metrics']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/metrics',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                telemetryId: data.telemetryId,
                type: data.type,
                startAt: data.startAt,
                endAt: data.endAt,
                url: data.url,
                country: data.country,
                region: data.region,
                city: data.city,
                timezone: data.timezone
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.telemetryId
     * @param data.startAt
     * @param data.endAt
     * @param data.unit
     * @param data.url
     * @param data.country
     * @param data.region
     * @param data.city
     * @param data.timezone
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static telemetryStats(data: $OpenApiTs['/workspace/{workspaceId}/telemetry/stats']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/telemetry/stats']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/telemetry/stats',
            path: {
                workspaceId: data.workspaceId
            },
            query: {
                telemetryId: data.telemetryId,
                startAt: data.startAt,
                endAt: data.endAt,
                unit: data.unit,
                url: data.url,
                country: data.country,
                region: data.region,
                city: data.city,
                timezone: data.timezone
            }
        });
    }
    
}

export class SurveyService {
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyAll(data: $OpenApiTs['/workspace/{workspaceId}/survey//all']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//all']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/survey//all',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyGet(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/survey//{surveyId}',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static surveyCount(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/count']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/count']['get']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/count']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/survey//{surveyId}/count',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @returns number Successful response
     * @returns unknown Error response
     * @throws ApiError
     */
    public static surveyAllResultCount(data: $OpenApiTs['/workspace/{workspaceId}/survey//allResultCount']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//allResultCount']['get']['res'][200] | $OpenApiTs['/workspace/{workspaceId}/survey//allResultCount']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/survey//allResultCount',
            path: {
                workspaceId: data.workspaceId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveySubmit(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/submit']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/submit']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/survey//{surveyId}/submit',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyCreate(data: $OpenApiTs['/workspace/{workspaceId}/survey//create']['post']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//create']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspace/{workspaceId}/survey//create',
            path: {
                workspaceId: data.workspaceId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @param data.requestBody
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyUpdate(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/update']['patch']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/update']['patch']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/workspace/{workspaceId}/survey//{surveyId}/update',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyDelete(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/delete']['delete']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/delete']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspace/{workspaceId}/survey//{surveyId}/delete',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.surveyId
     * @param data.limit
     * @param data.cursor
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static surveyResultList(data: $OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/result/list']['get']['req']): CancelablePromise<$OpenApiTs['/workspace/{workspaceId}/survey//{surveyId}/result/list']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspace/{workspaceId}/survey//{surveyId}/result/list',
            path: {
                workspaceId: data.workspaceId,
                surveyId: data.surveyId
            },
            query: {
                limit: data.limit,
                cursor: data.cursor
            }
        });
    }
    
}

export class AuditLogService {
    /**
     * Fetch workspace audit log
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.limit
     * @param data.cursor
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static auditLogFetchByCursor(data: $OpenApiTs['/audit/fetchByCursor']['get']['req']): CancelablePromise<$OpenApiTs['/audit/fetchByCursor']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/audit/fetchByCursor',
            query: {
                workspaceId: data.workspaceId,
                limit: data.limit,
                cursor: data.cursor
            }
        });
    }
    
}

export class BillingService {
    /**
     * get workspace usage
     * @param data The data for the request.
     * @param data.workspaceId
     * @param data.startAt
     * @param data.endAt
     * @returns unknown Successful response
     * @throws ApiError
     */
    public static billingUsage(data: $OpenApiTs['/billing/usage']['get']['req']): CancelablePromise<$OpenApiTs['/billing/usage']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/billing/usage',
            query: {
                workspaceId: data.workspaceId,
                startAt: data.startAt,
                endAt: data.endAt
            }
        });
    }
    
}